searchState.loadedDescShard("arachnid_shield", 0, "Represents any failed but complete interaction with the …\nA collection of errors that can occur when interacting …\nRepresents the mime type we intend to send to Arachnid …\nChild sexual abuse material, also known as “child …\nA container for any error messages that the Arachnid …\nAn exact cryptographic hash match using SHA1\nRepresents that the mime type could not be recognized when …\nContent considered harmful to children includes all images …\nRepresents anything that can go wrong while reading media …\nA match object representing the image in our database that …\nThe technology that was used to verify a match between two …\nA disjoint union of categories that a media could be …\nA visual near-match using PhotoDNA\nA record of a near match (based on perceptual hashing) to …\nThe media was not an exact match or near match to any …\nRepresents anything that could go wrong while initiating a …\nA representation of a request to scan media from provided …\nA representation of a request to scan media from a url.\nA representation of a request to scan a pdq list.\nA record of a media (+ metadata) that has been scanned by …\nA record of the matches for PDQ hashes that have been …\nA marker struct that defines a public api for V1 of the …\nThe classification category for this media, if any.\nThe classification of the media in our database.\nThe classification assigned to this media.\nThe actual error message inside the container.\nThe numeric distance between the two images. A distance …\nGiven a <code>ScanMediaFromUrl</code> request, send it to the Arachnid …\nGiven a <code>ScanMediaFromUrl</code> request, send it to the Arachnid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe technology that was used to verify a match between two …\nDetermine whether the scanned media matches any known …\nGet the mime type as a string.\nA record of a near match (based on perceptual hashing) to …\nCreate a new ArachnidShield consumer given the API user.\nCreate a new Async ArachnidShield consumer given the API …\nBuild a new request to scan media from provided bytes.\nEach pdq is bytes at input\nUse this to instantiate an existing API user.\nDetermine whether the scanned media has known matches.\nGiven the contents of some media, and a mime type for it, …\nGiven the contents of some media, and a mime type for it, …\nGiven a <code>ScanMediaFromBytes</code> request, send it to the …\nGiven a <code>ScanMediaFromBytes</code> request, send it to the …\nGiven a path to a file, scan its contents for CSAM using …\nGiven a path to a file, scan its contents for CSAM using …\nGiven the PDQ of some media, scan the contents for CSAM …\nGiven the PDQ of some media, scan the contents for CSAM …\nGiven a ‘ScanPdqHashes’ request, send it to the …\nGiven a ‘ScanPdqHashes’ request, send it to the …\nA collection of the match details for scanned PDQ hashes.\nThe base32 representation of the SHA1 hash of the media.\nThe base-32 representation of the SHA1 cryptographic hash …\nThe base-32 representation of the SHA1 cryptographic hash …\nThe hexadecimal representation of the SHA256 hash of the …\nThe base-16 (hexadecimal) representation of the SHA256 …\nThe base-16 (hexadecimal) representation of the SHA256 …\nThe total size, in bytes, of the media that was scanned.\nThe time, in seconds, in the submitted video file where …")